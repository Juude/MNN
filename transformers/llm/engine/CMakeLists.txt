option(LLM_SUPPORT_VISION "Llm model support vision input." OFF)
option(LLM_SUPPORT_AUDIO "Llm model support audio input." OFF)
option(BUILD_MLS "Build PC Commandline." OFF)
option(LLM_USE_MINJA "Use minja to apply template" ON)

set(LLM_DEPS ${MNN_DEPS})
if (LLM_SUPPORT_VISION AND MNN_BUILD_OPENCV)
    add_definitions(-DLLM_SUPPORT_VISION)
    if (MNN_SEP_BUILD)
        list(APPEND LLM_DEPS MNNOpenCV)
    endif()
    include_directories(${CMAKE_CURRENT_LIST_DIR}/../../../tools/cv/include/)
endif()

if (LLM_SUPPORT_AUDIO AND MNN_BUILD_AUDIO)
    if (MNN_SEP_BUILD)
        list(APPEND LLM_DEPS MNNAudio)
    endif()
    include_directories(${CMAKE_CURRENT_LIST_DIR}/../../../tools/audio/include/)
endif()

# include dir
include_directories(${CMAKE_CURRENT_LIST_DIR}/include/)

# source files
FILE(GLOB_RECURSE SRCS ${CMAKE_CURRENT_LIST_DIR}/src/*)

if (MNN_SEP_BUILD)
    if (MNN_BUILD_SHARED_LIBS)
        # compile dynamic so, support Linux/Mac
        add_library(llm SHARED ${SRCS})
        set_target_properties(llm PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS TRUE)
        target_link_libraries(llm ${LLM_DEPS})
    else()
        add_library(llm STATIC ${SRCS})
    endif()
    list(APPEND LLM_DEPS llm)
else()
    add_library(llm OBJECT ${SRCS})
endif()
if (LLM_USE_MINJA)
    target_compile_options(llm PRIVATE -DLLM_USE_MINJA)
    add_executable(apply_template ${CMAKE_CURRENT_LIST_DIR}/demo/apply_template.cpp)
    target_link_libraries(apply_template ${LLM_DEPS})
endif()

if (LLM_SUPPORT_VISION AND MNN_BUILD_OPENCV)
    target_compile_definitions(llm PRIVATE LLM_SUPPORT_VISION)
endif()
if (LLM_SUPPORT_AUDIO AND MNN_BUILD_AUDIO)
    add_definitions(-DLLM_SUPPORT_AUDIO)
endif()

add_executable(llm_demo ${CMAKE_CURRENT_LIST_DIR}/demo/llm_demo.cpp)
add_executable(embedding_demo ${CMAKE_CURRENT_LIST_DIR}/demo/embedding_demo.cpp)
add_executable(reranker_demo ${CMAKE_CURRENT_LIST_DIR}/demo/reranker_demo.cpp)
add_executable(rollback_demo ${CMAKE_CURRENT_LIST_DIR}/demo/rollback_demo.cpp)
add_executable(llm_bench ${CMAKE_CURRENT_LIST_DIR}/demo/llm_bench.cpp)
target_link_libraries(llm_demo ${LLM_DEPS})
target_link_libraries(embedding_demo ${LLM_DEPS})
target_link_libraries(reranker_demo ${LLM_DEPS})
target_link_libraries(rollback_demo ${LLM_DEPS})
target_link_libraries(llm_bench ${LLM_DEPS})